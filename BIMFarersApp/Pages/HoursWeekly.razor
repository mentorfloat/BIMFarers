@page "/hoursweekly"
@using System.Globalization
@inject HttpClient Http

<h1>Revit Hours - Weekly</h1>
    <div class="container my-5">
        <div class="row">
            <div class="col">
                @if (data == null)
                {
                <p><em>Loading...</em></p>
            }
            else
            {
                <RadzenCard Class="w-100 mb-4" >
                    <RadzenLabel Text="@totalhour.ToString("#.##")" Style="margin-left: 8px; vertical-align: middle;" />
                    <RadzenDatePicker TValue="DateTime?" DateFormat="d/MM/yyyy" DateRender=@DateRender Change=@(args => OnChange(args, "DatePicker with disabled dates", "MM/dd/yyyy")) Class="w-100" />
                </RadzenCard>
                <RadzenChart>
                    <RadzenColumnSeries Data="@data" CategoryProperty="Time" ValueProperty="Duration" Fills=@barhighlight/>
                    <RadzenColumnOptions Radius="5" />
                    <RadzenCategoryAxis Padding="20" >
                        <RadzenAxisTitle Text="Date" />
                    </RadzenCategoryAxis>
                    <RadzenValueAxis Formatter="@FormatAsHour">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Duration (hours)" />
                    </RadzenValueAxis>
                </RadzenChart>
            }
            </div>
        </div>
    </div>
@code {
    double totalhour = 0;
    string[] barhighlight = new[] { "#0A8AE6", "#0A8AE6", "#0A8AE6", "#0A8AE6", "#0A8AE6", "#0A8AE6", "#0A8AE6" };

    public class Foo
    {
        public string Start { get; set; }
        public string End { get; set; }
        public double Duration { get; set; }
        public string User { get; set; }
        public string Entry { get; set; }
        public string File { get; set; }
        public double UID { get; set; }
        public string View { get; set; }
        public string Type { get; set; }
    }

    public class Pro
    {
        public string Time{ get; set; }
        public double Duration{ get; set; }
    }

    public class WeekList
    {
        public DateTime StartWeek{ get; set; }
        public List<DateTime> WeekDates { get; set; }
    }

    private Foo[]? rawdata;
    private Pro[]? data;
    private List<WeekList> weekList = new();
    private List<DateTime> datelist = new();
    private string format = "d/MM/yyyy H:mm";

    protected override async Task OnInitializedAsync()
    {
        rawdata = await Http.GetFromJsonAsync<Foo[]>("sample-data/hourlog.json");

        //Get 1st element to determine start
        var start = DateTime.ParseExact(rawdata.First().Start, format, CultureInfo.InvariantCulture);
        var startweek = Extensions.FirstDayOfWeek(start).Date;
        //Get last element to determine end
        var end = DateTime.ParseExact(rawdata.Last().End, format, CultureInfo.InvariantCulture);
        var endweek = Extensions.FirstDayOfWeek(end).Date;

        //Determine number of weeks
        int weeknum = endweek.Subtract(startweek).Days/7 + 1;
        Console.WriteLine("Number of weeks with data is " + weeknum);

        //Sets up Week Range
        for(int w = 0; w < weeknum; w++)
        {
            var currentstartweek = startweek.AddDays(7*w);
            List<DateTime> oneweek = new();
            for(int i = 0; i < 7; i++)
                oneweek.Add(currentstartweek.AddDays(i));

            weekList.Add(new(){StartWeek = currentstartweek,WeekDates = oneweek});
        }

        //Sets up Date with Data for selection
        foreach(var raw in rawdata)
        {
            var rawDate = DateTime.ParseExact(raw.Start, format, CultureInfo.InvariantCulture).Date;
            if (datelist.Contains(rawDate))
                continue;
            else
                datelist.Add(rawDate);
        }

        RenderGraph(datelist.First());
    }

    private void RenderGraph(DateTime? selectedDate)
    {
        // Sets bar chart highlight
        barhighlight = new[] { "#0A8AE6", "#0A8AE6", "#0A8AE6", "#0A8AE6", "#0A8AE6", "#0A8AE6", "#0A8AE6" };
        int dayint = (int)selectedDate.Value.DayOfWeek;
        barhighlight[dayint] = "#F40042";

        var startweek = Extensions.FirstDayOfWeek(selectedDate.Value).Date;
        var selectedWeek = weekList.Find(d => d.StartWeek == startweek);
        List<Pro> datalist = new();
        foreach(var date in selectedWeek.WeekDates)
        {
            try
            {
                var filteredlist = rawdata.Where(x => DateTime.ParseExact(x.Start, format, CultureInfo.InvariantCulture).Date == date);

                double durationinday = 0;
                foreach(var time in filteredlist)
                {
                    durationinday += time.Duration;
                }

                totalhour += durationinday/3600;

                datalist.Add(new() { Time = date.ToString("d/MM"), Duration = durationinday });

            }
            catch(Exception ex)
            {
                Console.WriteLine("There's no data on this date within the selected week: " + ex.Message);
            }

        }
        data = datalist.ToArray(); 
    }

    string FormatAsHour(object value)
    {
        return ((double)value/3600).ToString("#.##");
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || !datelist.Contains(args.Date);
    }

    void OnChange(DateTime? value, string name, string format)
    {
        Console.WriteLine($"{name} value changed to {value?.ToString(format)}");
        try
        {
            totalhour = 0;
            RenderGraph(value?.Date);
        }
        catch(Exception ex)
        {
            Console.WriteLine("Something's wrong?? " + ex.Message);
        }
    }
}