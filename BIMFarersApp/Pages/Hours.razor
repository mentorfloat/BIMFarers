@page "/hours"
@using System.Globalization
@inject HttpClient Http

<style>
    .rz-axis .rz-axis-title {
        font-size: smaller;
    }

    .rz-legend-item-text {
        font-size: small;
    }

    .rz-donut-content {
        font-size: small;
    }

    .rz-category-axis .rz-tick-text {
        font-size: small;
    }

    @@media only screen and (max-width: 750px) {
        .rz-donut-content {
            visibility: hidden;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .rz-category-axis .rz-tick-text {
            visibility: hidden;
        }
    }

    @@media only screen and (max-width: 1200px) {
        .rz-category-axis .rz-tick-text {
            font-size: 0.9vw;
        }
    }

    @@media only screen and (min-width: 1400px) and (max-width: 1500px) {
        .rz-donut-content {
            font-size: 0.6vw;
        }
    }

    .rz-column-series.rz-series-0 {
        transform-origin: 0 68%;
        animation-duration: 1s;
        animation-delay: 0s;
        animation-name: slideUpBars;
        -webkit-animation-timing-function: ease-in-out; /* Safari and Chrome */
        -moz-animation-timing-function: ease-in-out; /* Safari and Chrome */
        -o-animation-timing-function: ease-in-out; /* Safari and Chrome */
        animation-timing-function: ease-in-out;
    }

    @@keyframes slideUpBars {
        0% {
            transform: scaleY(0);
        }

        100% {
            transform: scaleY(1);
        }
    }
</style>

<h1>Revit Hours</h1>
    <div class="container my-5">
        <div class="row">
            <div class="col">
                <RadzenCard Class="w-100 mb-4" >
                @if(selectedUser == null)
                {
                    <div class="p-3 center" style="height: 160px;">
                        <div class="lds-ellipsis d-flex"><div></div><div></div><div></div><div></div></div>
                    </div>
                }
                else
                {
                    <RadzenDropDown TValue="string"
                        Placeholder=@selectedUser.name
                        Data=@(Users.Select(u => u.name))
                        Change=@(args => OnUserSelected(args, "DropDown")) />
                    <RadzenLabel Text="@("Daily Revit Hours: " + dailyhour.ToString("#.##"))" Style="margin-left: 8px; vertical-align: middle;" />
                    <RadzenLabel Text="@("Weekly Revit Hours: " + weeklyhour.ToString("#.##"))" Style="margin-left: 8px; vertical-align: middle;" />
                    <RadzenDatePicker @bind-Value=@selectedDate TValue="DateTime?" DateFormat="MMM dd" DateRender=@DateRender Change=@(args => OnChange(args, "DatePicker with disabled dates", "MM/dd/yyyy")) Class="w-100" />
                }
                </RadzenCard>
                <div class="d-flex flex-column flex-xxl-row">
                    <div class="col-12 col-xxl-8 my-4" style="padding-right: 0.5rem;">
                        @if (timedata == null)
                        {
                            <div class="p-3 center" style="box-shadow: rgb(0 0 0 / 6%) 0px 6px 14px 0px;">
                                <div class="lds-ellipsis d-flex"><div></div><div></div><div></div><div></div></div>
                            </div>
                        }
                        else
                        {
                            <div class="p-3" style="box-shadow: rgb(0 0 0 / 6%) 0px 6px 14px 0px;">
                                <RadzenChart>
                                    <RadzenAreaSeries Title="Minutes" Smooth="true" Data="@timedata" CategoryProperty="Time" LineType="LineType.Dashed" ValueProperty="Duration" Fill="#e6ecef" Stroke="#0479cc">
                                    </RadzenAreaSeries>
                                    <RadzenLegend Visible="false" />
                                    <RadzenCategoryAxis Formatter="@FormatAsTime">
                                        <RadzenAxisTitle Text="Time (GMT+8)" />
                                    </RadzenCategoryAxis>
                                    <RadzenValueAxis Formatter="@FormatAsMinute">
                                        <RadzenGridLines Visible="true" />
                                        <RadzenAxisTitle Text="Duration (minutes)" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            </div>
                        }
                    </div>
                    <div class="col-12 col-xxl-4 my-4" style="padding-left: 0.5rem;">
                        @if (viewdata == null)
                        {
                            <div class="p-3 center" style="box-shadow: rgb(0 0 0 / 6%) 0px 6px 14px 0px;">
                                <div class="lds-ellipsis d-flex"><div></div><div></div><div></div><div></div></div>
                            </div>
                        }
                        else
                        {
                            <div class="p-3" style="box-shadow: rgb(0 0 0 / 6%) 0px 6px 14px 0px;">
                                <RadzenChart>
                                    <RadzenDonutSeries Title="Minutes" Data="@viewdata" CategoryProperty="View" ValueProperty="Duration" Fills=@donutcolors>
                                        <TitleTemplate>
                                            <div class="rz-donut-content">
                                                <div>Top 8</div> 
                                                <div>Active Views</div>
                                            </div>
                                        </TitleTemplate>
                                    </RadzenDonutSeries>
                                    <RadzenValueAxis Formatter="@FormatAsMinute">
                                        <RadzenAxisTitle Text="Duration (minutes)" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-12 my-4">
                    @if(daydata == null)
                    {
                        <div class="p-3 center" style="box-shadow: rgb(0 0 0 / 6%) 0px 6px 14px 0px;">
                            <div class="lds-ellipsis d-flex"><div></div><div></div><div></div><div></div></div>
                        </div>
                    }
                    else
                    {
                        <div class="p-3" style="box-shadow: rgb(0 0 0 / 6%) 0px 6px 14px 0px;">
                            <RadzenChart>
                                <RadzenColumnSeries Title="Hours" Data="@daydata" CategoryProperty="Day" ValueProperty="DurationDay" Fills=@barhighlight/>
                                <RadzenLegend Visible="false" />
                                <RadzenColumnOptions Radius="5" />
                                <RadzenCategoryAxis Padding="20" >
                                    <RadzenAxisTitle Text="Date" />
                                </RadzenCategoryAxis>
                                <RadzenValueAxis Formatter="@FormatAsHour">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="Duration (hours)" />
                                </RadzenValueAxis>
                            </RadzenChart>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
@code {
    DateTime? selectedDate;
    User? selectedUser;
    double dailyhour = 0;
    double weeklyhour = 0;
    string[] barhighlight;
    string[] donutcolors = new[] { "#F40042", "#0A8AE6", "#FDCB8E", "#479cc8", "#5b7081", "#69737b", "#a0a4a6", "#f0f0f0" };

    public class RawData
    {
        public string Start { get; set; }
        public string End { get; set; }
        public double Duration { get; set; }
        public string User { get; set; }
        public string Entry { get; set; }
        public string File { get; set; }
        public double UID { get; set; }
        public string View { get; set; }
        public string Type { get; set; }
    }

    public class User
    {
        public string name { get; set; }
        public List<DateTime> dateList { get; set; }
    }

    public class TimeData
    {
        public string Time{ get; set; }
        public double Duration{ get; set; }
    }

    public class Views
    {
        public string View{ get; set; }
        public double Duration{ get; set; }
    }

    public class DayData
    {
        public string Day { get; set; }
        public double DurationDay { get; set; }
    }

    public class WeekList
    {
        public DateTime StartWeek{ get; set; }
        public List<DateTime> WeekDates { get; set; }
    }

    private List<User> Users = new();
    private RawData[]? rawdata;
    private TimeData[]? timedata;
    private Views[]? viewdata;
    private DayData[]? daydata;
    private List<DateTime> datelist = new();
    private string format = "d/MM/yyyy H:mm";

    protected override async Task OnInitializedAsync()
    {
        rawdata = await Http.GetFromJsonAsync<RawData[]>("sample-data/hourlog.json");

        var distinctUsers = rawdata.Select(u => u.User).Distinct();

        foreach(var u in distinctUsers)
        {
            //Create new User
            User newUser = new();
            newUser.name = u;
            newUser.dateList = new();

            //Sets up Date Range for User
            foreach(var raw in rawdata.Where(s => s.User == u))
            {
                var rawDate = DateTime.ParseExact(raw.Start, format, CultureInfo.InvariantCulture).Date;
                if (newUser.dateList.Contains(rawDate))
                    continue;
                else
                    newUser.dateList.Add(rawDate);
            }

            Users.Add(newUser);
        }

        // Initial plot/display
        selectedUser = Users.Last();
        selectedDate = selectedUser.dateList.Last();
        timedata = await RenderGraph(selectedDate, selectedUser.name);
        viewdata = await RenderDonut(selectedDate, selectedUser.name);
        daydata = await RenderBar(selectedDate, selectedUser.name);
    }

    private async Task<TimeData[]?> RenderGraph(DateTime? selectedTime, string selectedUser)
    {
        await Task.Delay(200); // Unblocks UI render
        var filteredlist = rawdata.Where(x => DateTime.ParseExact(x.Start, format, CultureInfo.InvariantCulture).Date == selectedTime)
                                    .Where(x => x.User == selectedUser);
        //Get 1st element to determine x-axis start
        var filteredstart = DateTime.ParseExact(filteredlist.First().Start, format, CultureInfo.InvariantCulture);
        var axisStart = Extensions.RoundDownToNearest30(filteredstart);
        //Get last element to determine x-axis end
        var filteredend = DateTime.ParseExact(filteredlist.Last().End, format, CultureInfo.InvariantCulture);
        var axisEnd = Extensions.RoundUpToNearest30(filteredend);

        //Sets up Data List with the correct x-axis
        var datalist = new List<TimeData>();
        for(DateTime i = axisStart; i < axisEnd; i = i.AddMinutes(30))
        {
            datalist.Add(new TimeData { Time = i.ToString("d/MM/yyyy H:mm"), Duration = 0 });
        }

        await Task.Delay(100); // Unblocks UI render
        foreach(var x in datalist)
        {
            var xTime = DateTime.ParseExact(x.Time, format, CultureInfo.InvariantCulture);
            var xplus30 = xTime.AddMinutes(30);

            foreach(var raw in filteredlist)
            {
                var rawEnd = DateTime.ParseExact(raw.End, format, CultureInfo.InvariantCulture);
                if (rawEnd < xTime)
                    continue;

                var rawStart = DateTime.ParseExact(raw.Start, format, CultureInfo.InvariantCulture);
                if (rawStart > xplus30)
                    continue;

                if (rawStart < xTime)
                {
                    if (rawEnd >= xplus30)
                    {
                        x.Duration = 1800;
                        break;
                    }
                    else
                    {
                        var span = rawEnd.Subtract(xTime);
                        x.Duration += span.TotalSeconds;
                    }
                }
                else //if rawStart >= xTime
                {
                    if (rawEnd >= xplus30)
                    {
                        var span = xplus30.Subtract(rawStart);
                        x.Duration += span.TotalSeconds;
                        break;
                    }
                    else
                    {
                        var span = rawEnd.Subtract(rawStart);
                        x.Duration += span.TotalSeconds;
                    }
                }
            }

            dailyhour += x.Duration/3600;
        }

        return datalist.ToArray();
    }

    private async Task<Views[]?> RenderDonut(DateTime? selectedTime, string selectedUser)
    {
        await Task.Delay(100); // Unblocks UI render
        var filteredlist = rawdata.Where(x => DateTime.ParseExact(x.Start, format, CultureInfo.InvariantCulture).Date == selectedTime)
                                    .Where(x => x.User == selectedUser);
        List<Views> viewdatas = new();
        List<string> viewlist = new();

        await Task.Delay(100); // Unblocks UI render
        foreach(var data in filteredlist)
        {
            if (viewlist.Contains(data.View))
                continue;
            else
                viewlist.Add(data.View);
        }

        await Task.Delay(100); // Unblocks UI render
        foreach(var view in viewlist)
        {
            var viewdurations = filteredlist.Where(v => v.View == view);
            double viewduration = 0;
            foreach (var v in viewdurations)
                viewduration += v.Duration;

            viewdatas.Add(new() { View = view, Duration = viewduration });
        }

        return viewdatas.OrderByDescending(d => d.Duration).Take(8).ToArray();
    }

    private async Task<DayData[]?> RenderBar(DateTime? selectedDate, string selectedUser)
    {
        await Task.Delay(100); // Unblocks UI render
                               //Get 1st element to determine start
        var start = DateTime.ParseExact(rawdata.Where(x => x.User == selectedUser).First().Start, format, CultureInfo.InvariantCulture);
        var startweek = Extensions.FirstDayOfWeek(start).Date;
        //Get last element to determine end
        var end = DateTime.ParseExact(rawdata.Where(x => x.User == selectedUser).Last().End, format, CultureInfo.InvariantCulture);
        var endweek = Extensions.FirstDayOfWeek(end).Date;

        //Determine number of weeks
        int weeknum = endweek.Subtract(startweek).Days/7 + 1;

        List<WeekList> weekList = new();
        //Sets up Week Range
        for(int w = 0; w < weeknum; w++)
        {
            var currentstartweek = startweek.AddDays(7*w);
            List<DateTime> oneweek = new();
            for(int i = 0; i < 7; i++)
                oneweek.Add(currentstartweek.AddDays(i));

            weekList.Add(new(){StartWeek = currentstartweek,WeekDates = oneweek});
        }

        // Sets bar chart highlight
        barhighlight = new[] { "#0479cc", "#0479cc", "#0479cc", "#0479cc", "#0479cc", "#0479cc", "#0479cc" };
        int dayint = (int)selectedDate.Value.DayOfWeek;
        barhighlight[dayint] = "#F40042";

        startweek = Extensions.FirstDayOfWeek(selectedDate.Value).Date;
        var selectedWeek = weekList.Find(d => d.StartWeek == startweek);
        List<DayData> datalist = new();
        foreach(var date in selectedWeek.WeekDates)
        {
            try
            {
                var filteredlist = rawdata.Where(x => DateTime.ParseExact(x.Start, format, CultureInfo.InvariantCulture).Date == date)
                                            .Where(x => x.User == selectedUser);

                double durationinday = 0;
                await Task.Delay(100); // Unblocks UI render
                foreach(var time in filteredlist)
                    durationinday += time.Duration;

                weeklyhour += durationinday/3600;

                datalist.Add(new() { Day = date.ToString("d/MM"), DurationDay = durationinday });

            }
            catch(Exception ex)
            {
                Console.WriteLine("There's no data on this date within the selected week: " + ex.Message);
            }

        }
        return datalist.ToArray();
    }

    string FormatAsMinute(object value)
    {
        return ((double)value/60).ToString("#.##");
    }

    string FormatAsHour(object value)
    {
        return ((double)value/3600).ToString("#.##");
    }

    string FormatAsTime(object value)
    {
        if (value != null)
        {
            DateTimeFormatInfo auDtfi = new CultureInfo("en-AU", false).DateTimeFormat;
            var dT = Convert.ToDateTime(value, auDtfi);

            if (dT.Minute == 30)
                return string.Empty;
            else
            {
                string result = dT.ToString("h tt");
                return result;
            }
        }

        return string.Empty;
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || !selectedUser.dateList.Contains(args.Date);
    }

    async Task OnChange(DateTime? value, string name, string format)
    {
        Console.WriteLine($"{name} value changed to {value?.ToString(format)}");
        try
        {
            // Display loaders
            timedata = null;
            viewdata = null;
            daydata = null;
            // Reset hours
            dailyhour = 0;
            weeklyhour = 0;
            // Update selected Date
            selectedDate = value?.Date;
            // Replot graphs
            timedata = await RenderGraph(selectedDate, selectedUser.name);
            viewdata = await RenderDonut(selectedDate, selectedUser.name);
            daydata = await RenderBar(selectedDate, selectedUser.name);
        }
        catch(Exception ex)
        {
            Console.WriteLine("Something's wrong?? " + ex.Message);
        }
    }

    async Task OnUserSelected(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        Console.WriteLine($"{name} value changed to {str}");

        try
        {
            // Display loaders
            timedata = null;
            viewdata = null;
            daydata = null;
            // Reset hours
            dailyhour = 0;
            weeklyhour = 0;
            // Update selected User
            selectedUser = Users.FirstOrDefault(u => u.name == str.ToString());

            // Check if date is present
            if (!selectedUser.dateList.Contains(selectedDate.Value))
                selectedDate = selectedUser.dateList.Last();

            // Replot graphs
            timedata = await RenderGraph(selectedDate, selectedUser.name);
            viewdata = await RenderDonut(selectedDate, selectedUser.name);
            daydata = await RenderBar(selectedDate, selectedUser.name);
        }
        catch(Exception ex)
        {
            Console.WriteLine("Something's wrong?? " + ex.Message);
        }
    }
}